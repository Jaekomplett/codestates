{"numFailedTestSuites":1,"numFailedTests":0,"numPassedTestSuites":4,"numPassedTests":13,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":1,"numTodoTests":0,"numTotalTestSuites":5,"numTotalTests":13,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1634532287927,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["callback Test","getDataFromFile"],"failureMessages":[],"fullName":"callback Test getDataFromFile 파일을 읽고 나서 callback이 실행되어야 합니다","location":null,"status":"passed","title":"파일을 읽고 나서 callback이 실행되어야 합니다"},{"ancestorTitles":["callback Test","getDataFromFile"],"failureMessages":[],"fullName":"callback Test getDataFromFile 에러가 발생할 경우, callback 첫번째 인자에 에러 객체가 전달되어야 합니다","location":null,"status":"passed","title":"에러가 발생할 경우, callback 첫번째 인자에 에러 객체가 전달되어야 합니다"},{"ancestorTitles":["callback Test","getDataFromFile"],"failureMessages":[],"fullName":"callback Test getDataFromFile callback 두번째 인자에 파일 내용이 전달되어야 합니다","location":null,"status":"passed","title":"callback 두번째 인자에 파일 내용이 전달되어야 합니다"}],"endTime":1634532289356,"message":"","name":"/home/jae/Desktop/section 2/im-sprint-async-and-promise/part-2/__test__/01_callBack.test.js","startTime":1634532288726,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Promise Test","getDataFromFilePromise"],"failureMessages":[],"fullName":"Promise Test getDataFromFilePromise Promise 형태로 리턴되어야 합니다","location":null,"status":"passed","title":"Promise 형태로 리턴되어야 합니다"},{"ancestorTitles":["Promise Test","getDataFromFilePromise"],"failureMessages":[],"fullName":"Promise Test getDataFromFilePromise then 블록을 통하여 파일 내용이 전달되어야 합니다","location":null,"status":"passed","title":"then 블록을 통하여 파일 내용이 전달되어야 합니다"},{"ancestorTitles":["Promise Test","getDataFromFilePromise"],"failureMessages":[],"fullName":"Promise Test getDataFromFilePromise 에러가 발생할 경우, catch 블록을 통하여 에러 객체가 전달되어야 합니다","location":null,"status":"passed","title":"에러가 발생할 경우, catch 블록을 통하여 에러 객체가 전달되어야 합니다"}],"endTime":1634532289507,"message":"","name":"/home/jae/Desktop/section 2/im-sprint-async-and-promise/part-2/__test__/02_promiseConstructor.test.js","startTime":1634532289373,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Basic chaining Test","readAllUsersChaining"],"failureMessages":[],"fullName":"Basic chaining Test readAllUsersChaining 체이닝의 결과가 Promise 형태로 리턴되어야 합니다","location":null,"status":"passed","title":"체이닝의 결과가 Promise 형태로 리턴되어야 합니다"},{"ancestorTitles":["Basic chaining Test","readAllUsersChaining"],"failureMessages":[],"fullName":"Basic chaining Test readAllUsersChaining user1.json의 내용과 user2.json 내용을 합쳐 객체로 리턴되어야 합니다","location":null,"status":"passed","title":"user1.json의 내용과 user2.json 내용을 합쳐 객체로 리턴되어야 합니다"},{"ancestorTitles":["Basic chaining Test","readAllUsersChaining"],"failureMessages":[],"fullName":"Basic chaining Test readAllUsersChaining fs module을 직접 사용하지 말고, getDataFromFilePromise을 두 번 사용해야 합니다","location":null,"status":"passed","title":"fs module을 직접 사용하지 말고, getDataFromFilePromise을 두 번 사용해야 합니다"},{"ancestorTitles":["Basic chaining Test","readAllUsersChaining"],"failureMessages":[],"fullName":"Basic chaining Test readAllUsersChaining Promise.all 또는 async/await을 사용하지 않고 풀어보세요","location":null,"status":"passed","title":"Promise.all 또는 async/await을 사용하지 않고 풀어보세요"}],"endTime":1634532289753,"message":"","name":"/home/jae/Desktop/section 2/im-sprint-async-and-promise/part-2/__test__/03_basicChaining.test.js","startTime":1634532289513,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1634532290116,"message":"  ● Test suite failed to run\n\n    ReferenceError: promise is not defined\n\n      37 |   // text === [ Promise, Promise]\n      38 |   // Promise.all(여기에 배열이 담긴다)\n    > 39 |   return Promise.all(promise).then((texts) =>\n         |                      ^\n      40 |     texts.map((text) => JSON.parse(text))\n      41 |   );\n      42 |   // 상태 : fullfilled, 결과 : ['', ''] => Promise\n\n      at readAllUsers (part-2/04_promiseAll.js:39:22)\n      at Object.<anonymous> (part-2/04_promiseAll.js:45:1)\n      at Object.<anonymous> (part-2/__test__/04_promiseAll.test.js:1:26)\n","name":"/home/jae/Desktop/section 2/im-sprint-async-and-promise/part-2/__test__/04_promiseAll.test.js","startTime":1634532290116,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["async/await Test","readAllUsersAsyncAwait"],"failureMessages":[],"fullName":"async/await Test readAllUsersAsyncAwait async 키워드를 사용한 함수는 AsyncFunction의 인스턴스입니다","location":null,"status":"passed","title":"async 키워드를 사용한 함수는 AsyncFunction의 인스턴스입니다"},{"ancestorTitles":["async/await Test","readAllUsersAsyncAwait"],"failureMessages":[],"fullName":"async/await Test readAllUsersAsyncAwait await 키워드만 이용해 배열이 리턴되어야 합니다","location":null,"status":"passed","title":"await 키워드만 이용해 배열이 리턴되어야 합니다"},{"ancestorTitles":["async/await Test","readAllUsersAsyncAwait"],"failureMessages":[],"fullName":"async/await Test readAllUsersAsyncAwait user1.json의 내용과 user2.json 내용을 합쳐 배열로 리턴되어야 합니다","location":null,"status":"passed","title":"user1.json의 내용과 user2.json 내용을 합쳐 배열로 리턴되어야 합니다"}],"endTime":1634532290112,"message":"","name":"/home/jae/Desktop/section 2/im-sprint-async-and-promise/part-2/__test__/05_asyncAwait.test.js","startTime":1634532289999,"status":"passed","summary":""}],"wasInterrupted":false}